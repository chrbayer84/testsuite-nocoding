################################################################################################
#
# CSV-based URL Action Definition
#
# This is the definition of url actions as GET or POST including parameters and validation.
# 
# Format Details and defaults when not set 
# 
# Type:			action (A) or static content (S), defaults to A (optional)
# Name:			the name of the action (Action-<recordNumber>) (optional)
# URL:			an url (mandatory)
# Method:		which method of GET or POST, defaults to GET
# Parameters:	which parameters to send, when GET, these can be already part of the url, 
#               no default values (optional)
# ResponseCode:	which http response code is expected, defaults to 200 (optional)
# XPath:		XPath for validation (none) only used when TURL (optional)
# RegExp:		regexp for validation (none) only used when TLWURL (optional)
# Text:			Text for validation against the xpath/regexp result or just searched on the page,
#               no default text (optional) 
# Encoded:		whether or not url and parameters are already encoded, defaults to false (optional) 
#
# Comments and empty lines are permitted. Header lines have to be valid. Additional header lines
# are not permitted as well as the spelling has to match including upper/lower-casing.
#
# Additional placeholders give you the ability to insert random data into the lines. The columns
# URL, Parameters, XPath, Text, and RegExp support it.
#
# ${NOW} : Current timestamp in milliseconds
# ${RANDOM.String(x)} : a random string with length x. Contains [A-Za-z].   
# ${RANDOM.String(x, s)} : a random string with length x. Contains characters from s.   
# ${RANDOM.Number(max)} : returns an integer between 0 (inclusive) and max (inclusive)   
# ${RANDOM.Number(min, max)} : returns an integer between min (inclusive) and max (inclusive)   
# ${foobar} : Looks up the property foobar from the properties. Normal fallback mode. 
#
# Additionally you can use DATA which is an instance if the GeneralDataProvider. So things like
# ${DATA.getStreet(false)} or ${DATA.getTrulyUniqueEmail("xyzqtar987654.com")} will work.
# You can basically write a lot into this command, because it is a beanshell. 
#
# A special feature are the columns xpath1 to xpath10. You can get any data from the page using
# these. They will end up in variables xpath1 to xpath10 and can be used in any expression later.
#
# When running the LW based test, you have to use regexp1 to regexp10 instead. If you specify
# a capturing group, the group data will end up in regexp1[1] or higher.
#
# The interpretation of ${something} starts with the property lookup. Only if no property is
# found, the beanshell interpretation will take place.
#
# The character $ is NOT supported within the commands right now.
#
#################################################################################################
# The header. This is for TURL, because it uses XPath.
Name, URL, Method, Parameters, ResponseCode, XPath, Text, Encoded, xpath1, xpath2

# load the homepage
#Homepage,"${host}/",GET,,200,/html/body/div/div[2]/form/fieldset/legend,"Login",false,,

# log on
Login,"${host}/users/login",POST,"data[User][username]=bla@de.de&data[User][password]=egal",200,,,false,,

# Goto to new article creation, verify existence of xpath, content is not needed, fill xpath1 and xpath2 with data for later use
Task,"${host}/tasks",GET,,200,/html/body/div/div[2]/form/fieldset/legend,"Arbeitszeit eintragen",true,,

# Save article, pass the xpath1 and xpath2 into the request and at the same time, save the data as entry and date for later, just to demo it, we are not using this here.
#StartTask,"${host}/tasks",POST,"&data%5BTask%5D%5Bclient_id%5D=1&data%5BTask%5D%5Bdescription%5D=${RANDOM.String(25)}&data%5BTask%5D%5Bproxy_id%5D=&x=72&y=42",200,,,true,,

# Logout, GET does not need the parameters, it can be part of the url already
#Logout,"${host}/logout",GET,,200,,,false,,

#Homepage,"${host}/",GET,,200,/html/body/div/div[2]/form/fieldset/legend,"Login",false,,
